<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cordychain</title>

    <!-- Bootstrap 5 CDN Links -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.1.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"></script>
    
 
      

    <!-- Custom File's Link -->
    <link rel="stylesheet" href="./CSS/style1.css">
    <link rel="stylesheet" href="./CSS/prod_reg.css">
    <script src="https://cdn.jsdelivr.net/npm/web3@1.5.3/dist/web3.min.js"></script>


    <style>
           .card-img-top {
      max-width: 100%;
      height: auto;
    }

    .popup {
  display: none;
  position: fixed;
  z-index: 9999;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.8);
}

.popup-content {
  background-color: #fefefe;
  margin: 10% auto;
  padding: 20px;
  border: 1px solid #888;
  width: 50%;
  text-align: center;
}

.close {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
  cursor: pointer;
}

.close:hover,
.close:focus {
  color: #000;
  text-decoration: none;
  cursor: pointer;
}

  </style>
 

   
				

</head>

<body style="background: url('./img/image2-3\ 2.png') no-repeat center center; background-size: cover;" data-bs-spy="scroll" data-bs-target=".navbar" data-bs-offset="100">
    
    <!-- Navbar section --> 
    <header class="header_wrapper">
        <nav class="navbar navbar-expand-lg">
            <div class="container">
              <a class="navbar-brand" href="#">
                  <img decoding="async" src="./img/Asset 8 4.png" class="logo-fluid" >
              </a>
              <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <!-- <span class="navbar-toggler-icon"></span> -->
                <i class="fas fa-stream navbar-toggler-icon"></i>
              </button>
              <div class="collapse navbar-collapse justify-content-end" id="navbarNav">
                <ul class="navbar-nav  menu-navbar-nav">
                  <li class="nav-item">
                    <a class="nav-link "  href="./index.html">Home</a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="./about.html">About</a>
                  </li>
                  <li class="nav-item mt-3 mt-lg-0">
                    <a class="nav-link" href="#">Contact</a>
                  </li>
                  <li class="nav-item mt-3 mt-lg-0">
                    <button class="nav-link btn btn-success color-white" href="#">Logout</button>
                  </li>
                </ul>
              </div>
            </div>
          </nav>
    </header>

    <form class="form" id="form"
      >
      <div class="form-group">
        <label for="pid">Pid:</label>
        <input type="text" class="form-control" id="pid" placeholder="">
      </div>
        <div class="form-group">
          <label for="Quality">Quality:</label>
          <input type="text" class="form-control" id="Quality" placeholder="">
        </div>
        <div class="form-group">
          <label for="Quantity">Quantity:</label>
          <input type="Quantity" class="form-control" id="Quantity" placeholder="">
        </div>
        <div class="form-group">
            <label for="Exporter License">Exporter License:</label>
            <input type="Exporter License" class="form-control" id="Exporter License" placeholder="">
          </div><div class="form-group">
            <label for="Harvester">Harvester:</label>
            <input type="Harvester" class="form-control" id="Harvester" placeholder="">
          </div><div class="form-group">
            <label for="Source">Source:</label>
            <input type="Source" class="form-control" id="Source" placeholder="">
          </div>
        <button type="submit" class="btn btn-success">Register</button>
    </form>
      
    <!-- Navbar section exit -->

<!-- ***************************************FOOTER******************************************** -->
 <section id="about" class="footer_wrapper wrapper">
    <div class="container pb-3">
        <div class="row">
            <div class="col-lg-4 col-md-6 mb-4">
                <h5>Cordychain </h5>
                <p class="ps-0"> A blockchain based centralized web application that enables user to access the details of the cordyceps.  </p>
            </div>
            <div class="col-lg-4 col-md-6 mb-4">
                <h5> Contact Us</h5>
                <ul class="link-widget p-0">
                    <div class="contact-info">
                        <ul class="list-unstyled p-0">
                            <li><a href="#"><i class="fa fa-phone me-3"></i>+975 17234341</a></li>
                            <li><a href="#"><i class="fa fa-envelope me-3"></i>developer@gmail.com</a></li>
                        </ul>
                    </div>
                </ul>
            </div>

            <div class="col-lg-4 col-md-6 mb-4">
                <h5>Stay Connected</h5>
                <ul class="social-network d-flex align-items-center p-0 ">
                    <li><a href="#"><i class="fab fa-facebook-f"></i></a></li>
                    <li><a href="#"><i class="fab fa-twitter"></i></a></li>
                    <li><a href="#"><i class="fab fa-google-plus-g"></i></a></li>
                    <li><a href="#"><i class="fab fa-vimeo-v"></i></a></li>
                </ul>
            </div>



        </div>
    </div>
    <div class="container-fluid copyright-section">
        <p class="p-0">Copyright <a href="#">Â© CORDYCHAIN.</a> All Rights Reserved</p>
    </div>
</section>

<div id="popup" class="popup">
  <div class="popup-content">
    <span class="close" onclick="closePopup()">&times;</span>
    <h2>QR Code</h2>
    <div id="qrcode"></div>
    <button onclick="downloadQRCode()">Download QR Code</button>
  </div>
</div>

 
    <!-- Bootstrap 5 JS CDN Links -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/2.9.2/umd/popper.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.1.0/js/bootstrap.min.js"></script>

    <!-- Custom Js Link -->
 
    
    <script src="https://cdn.jsdelivr.net/npm/web3@1.5.3/dist/web3.min.js"></script>

    <script>
      // Connect to the contract
      var contractAddress = '0x33BC66756a50b9C3bAbAD19d8a5f32D7a36D9731';
           var contractABI = [{
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "quality",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "quantity",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "exporterLicense",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "harvestor",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "source",
          "type": "string"
        }
      ],
      "name": "CreateProductEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "qrCode",
          "type": "bytes"
        }
      ],
      "name": "QRCodeEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "qrCode",
          "type": "bytes"
        }
      ],
      "name": "ScanQRCodeEvent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "productCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "products",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "quality",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "quantity",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "exporterLicense",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "harvestor",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "source",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "qrCodesScanned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_quality",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_quantity",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_exporterLicense",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_harvestor",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_source",
          "type": "string"
        }
      ],
      "name": "createProduct",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "quality",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "quantity",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "exporterLicense",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "harvestor",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "source",
              "type": "string"
            }
          ],
          "internalType": "struct ProductReg.Product",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getProductById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "quality",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "quantity",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "exporterLicense",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "harvestor",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "source",
              "type": "string"
            }
          ],
          "internalType": "struct ProductReg.Product",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getQRCodeById",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "qrCode",
          "type": "bytes"
        }
      ],
      "name": "scanQRCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ];
    
      // Request user account access
    // Request user account access
ethereum.request({ method: 'eth_requestAccounts' })
  .then(function(accounts) {
    // Use the first account
    account = accounts[0];
  })
  .catch(function(error) {
    console.error(error);
  });

    
      // Call the createProduct function in the contract
      function createProduct(pid, quality, quantity, exporterLicense, harvestor, source) {
        contract.methods.createProduct(
            pid,
            quality,
            quantity,
            exporterLicense,
            harvestor,
            source
          )
          .send({ from: account, gasPrice: '10000000000', gas: 500000 })
          .then(function(result) {
            // Handle the result
            console.log(result);
            
            window.setTimeout(() => {
                location.assign('/')
            })
        
          })
          .catch(function(error) {
            // Handle errors
            console.error(error);
          });
      }
    
      document.querySelector('.form').addEventListener('submit', function(e) {
        e.preventDefault();
        var pid = document.getElementById('pid').value;
        var quality = document.getElementById('Quality').value;
        var quantity = document.getElementById('Quantity').value;
        var exporterLicense = document.getElementById('Exporter License').value;
        var harvestor = document.getElementById('Harvester').value;
        var source = document.getElementById('Source').value;
    
        createProduct(pid, quality, quantity, exporterLicense, harvestor, source);
      });
    
     
     // Check if MetaMask is installed
if (window.ethereum) {
  // MetaMask is installed, enable the application
  web3 = new Web3(ethereum);
} else {
  // MetaMask is not installed, show an error message or redirect the user
  alert('Please install MetaMask to use this application.');
}

    
      var contract = new web3.eth.Contract(contractABI, contractAddress);
    </script>
    
       
 
 
    
    <script src="js/main.js"></script>

</body>

</html>

        

qrcode

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cordychain</title>

    <!-- Bootstrap 5 CDN Links -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.1.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js"></script>
    <!-- <script src="https://cdn.jsdelivr.net/npm/qrcode/build/qrcode.min.js"></script> -->

    
 
      

    <!-- Custom File's Link -->
    <link rel="stylesheet" href="./CSS/style1.css">
    <link rel="stylesheet" href="./CSS/prod_reg.css">
    <script src="https://cdn.jsdelivr.net/npm/web3@1.5.3/dist/web3.min.js"></script>
    <!-- <script src="https://cdn.jsdelivr.net/npm/qrcode@1.4.4/qrcode.min.js"></script> -->



    <style>
           .card-img-top {
      max-width: 100%;
      height: auto;
    }

    .popup {
  display: none;
  position: fixed;
  z-index: 9999;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.8);
}

.popup-content {
  background-color: #fefefe;
  margin: 10% auto;
  padding: 20px;
  border: 1px solid #888;
  width: 50%;
  text-align: center;
}

.close {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
  cursor: pointer;
}

.close:hover,
.close:focus {
  color: #000;
  text-decoration: none;
  cursor: pointer;
}

  </style>
 

   
				

</head>

<body style="background: url('./img/image2-3\ 2.png') no-repeat center center; background-size: cover;" data-bs-spy="scroll" data-bs-target=".navbar" data-bs-offset="100">
    
    <!-- Navbar section --> 
    <header class="header_wrapper">
        <nav class="navbar navbar-expand-lg">
            <div class="container">
              <a class="navbar-brand" href="#">
                  <img decoding="async" src="./img/Asset 8 4.png" class="logo-fluid" >
              </a>
              <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <!-- <span class="navbar-toggler-icon"></span> -->
                <i class="fas fa-stream navbar-toggler-icon"></i>
              </button>
              <div class="collapse navbar-collapse justify-content-end" id="navbarNav">
                <ul class="navbar-nav  menu-navbar-nav">
                  <li class="nav-item">
                    <a class="nav-link "  href="./index.html">Home</a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="./about.html">About</a>
                  </li>
                  <li class="nav-item mt-3 mt-lg-0">
                    <a class="nav-link" href="#">Contact</a>
                  </li>
                  <li class="nav-item mt-3 mt-lg-0">
                    <button class="nav-link btn btn-success color-white" href="#">Logout</button>
                  </li>
                </ul>
              </div>
            </div>
          </nav>
    </header>

    <form class="form" id="form"
      >
      <div class="form-group">
        <label for="pid">Pid:</label>
        <input type="text" class="form-control" id="pid" placeholder="">
      </div>
        <div class="form-group">
          <label for="Quality">Quality:</label>
          <input type="text" class="form-control" id="Quality" placeholder="">
        </div>
        <div class="form-group">
          <label for="Quantity">Quantity:</label>
          <input type="Quantity" class="form-control" id="Quantity" placeholder="">
        </div>
        <div class="form-group">
            <label for="Exporter License">Exporter License:</label>
            <input type="Exporter License" class="form-control" id="Exporter License" placeholder="">
          </div><div class="form-group">
            <label for="Harvester">Harvester:</label>
            <input type="Harvester" class="form-control" id="Harvester" placeholder="">
          </div><div class="form-group">
            <label for="Source">Source:</label>
            <input type="Source" class="form-control" id="Source" placeholder="">
          </div>
        <button type="submit" class="btn btn-success">Register</button>
    </form>
      
    <!-- Navbar section exit -->

<!-- ***************************************FOOTER******************************************** -->
 <section id="about" class="footer_wrapper wrapper">
    <div class="container pb-3">
        <div class="row">
            <div class="col-lg-4 col-md-6 mb-4">
                <h5>Cordychain </h5>
                <p class="ps-0"> A blockchain based centralized web application that enables user to access the details of the cordyceps.  </p>
            </div>
            <div class="col-lg-4 col-md-6 mb-4">
                <h5> Contact Us</h5>
                <ul class="link-widget p-0">
                    <div class="contact-info">
                        <ul class="list-unstyled p-0">
                            <li><a href="#"><i class="fa fa-phone me-3"></i>+975 17234341</a></li>
                            <li><a href="#"><i class="fa fa-envelope me-3"></i>developer@gmail.com</a></li>
                        </ul>
                    </div>
                </ul>
            </div>

            <div class="col-lg-4 col-md-6 mb-4">
                <h5>Stay Connected</h5>
                <ul class="social-network d-flex align-items-center p-0 ">
                    <li><a href="#"><i class="fab fa-facebook-f"></i></a></li>
                    <li><a href="#"><i class="fab fa-twitter"></i></a></li>
                    <li><a href="#"><i class="fab fa-google-plus-g"></i></a></li>
                    <li><a href="#"><i class="fab fa-vimeo-v"></i></a></li>
                </ul>
            </div>



        </div>
    </div>
    <div class="container-fluid copyright-section">
        <p class="p-0">Copyright <a href="#">Â© CORDYCHAIN.</a> All Rights Reserved</p>
    </div>
</section>

<div id="popup" class="popup">
  <div class="popup-content">
    <span class="close" onclick="closePopup()">&times;</span>
    <h2>QR Code</h2>
    <div id="qrcode"></div>
    <button onclick="downloadQRCode()">Download QR Code</button>
  </div>
</div>

 
    <!-- Bootstrap 5 JS CDN Links -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/2.9.2/umd/popper.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.1.0/js/bootstrap.min.js"></script>

    <!-- Custom Js Link -->
 
    
    <script src="https://cdn.jsdelivr.net/npm/web3@1.5.3/dist/web3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js" integrity="sha512-CNgIRecGo7nphbeZ04Sc13ka07paqdeTu0WR1IM4kNcpmBAUSHSQX0FslNhTDadL4O5SAGapGt4FodqL8My0mA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <!-- <script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script> -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.3.2/html2canvas.min.js"></script>





    <script>

      // document.addEventListener("DOMContentLoaded", function() {
        (function () {
      // Connect to the contract
      var contractAddress = '0x33BC66756a50b9C3bAbAD19d8a5f32D7a36D9731';
           var contractABI = [{
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "quality",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "quantity",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "exporterLicense",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "harvestor",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "source",
          "type": "string"
        }
      ],
      "name": "CreateProductEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "qrCode",
          "type": "bytes"
        }
      ],
      "name": "QRCodeEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "qrCode",
          "type": "bytes"
        }
      ],
      "name": "ScanQRCodeEvent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "productCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "products",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "quality",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "quantity",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "exporterLicense",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "harvestor",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "source",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "qrCodesScanned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_quality",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_quantity",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_exporterLicense",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_harvestor",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_source",
          "type": "string"
        }
      ],
      "name": "createProduct",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "quality",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "quantity",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "exporterLicense",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "harvestor",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "source",
              "type": "string"
            }
          ],
          "internalType": "struct ProductReg.Product",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getProductById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pid",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "quality",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "quantity",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "exporterLicense",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "harvestor",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "source",
              "type": "string"
            }
          ],
          "internalType": "struct ProductReg.Product",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getQRCodeById",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "qrCode",
          "type": "bytes"
        }
      ],
      "name": "scanQRCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ];
    
      // Request user account access
    // Request user account access
ethereum.request({ method: 'eth_requestAccounts' })
  .then(function(accounts) {
    // Use the first account
    account = accounts[0];
  })
  .catch(function(error) {
    console.error(error);
  });
  
 
  function generateQRCode(product) {
  if (
    product.pid === undefined ||
    product.quality === undefined ||
    product.quantity === undefined ||
    product.exporterLicense === undefined ||
    product.harvestor === undefined ||
    product.source === undefined
  ) {
    throw new Error("Missing required product properties");
  }

  // Convert the product details into a concatenated string
  var productDetails =
    product.pid.toString() +
    product.quality +
    product.quantity +
    product.exporterLicense +
    product.harvestor +
    product.source;

  // Create a new QRCode instance
  var qrCode = new QRCode(document.getElementById("qrcode"), {
    text: productDetails,
    width: 128,
    height: 128,
  });

  // Get the canvas element
  var canvas = document.getElementById("qrcode").getElementsByTagName("canvas")[0];

  // Convert the canvas image to a data URL
  var qrCodeImage = canvas.toDataURL();

  return qrCodeImage;
}

  // Function to open the popup and display the QR code
  function openPopup(qrCodeImage) {
    var popup = window.open("", "", "width=400,height=400");

    if (popup && !popup.closed) {
      popup.document.documentElement.innerHTML = `
        <html>
          <head>
            <title>QR Code</title>
          </head>
          <body>
            <img src="${qrCodeImage}" alt="QR Code" /><br>
            <a href="${qrCodeImage}" download="qrcode.png">Download QR Code</a>
          </body>
        </html>
      `;
    } else {
      alert("The popup window was blocked by the browser. Please allow popups and try again.");
    }
  }

  // Function to close the popup
  function closePopup() {
    var popup = document.getElementById("popup");
    popup.style.display = "none";
  }

  // Function to download the QR code image
  function downloadQRCode() {
    var qrCodeDiv = document.getElementById("qrcode");
    var qrCodeImage = qrCodeDiv.firstChild.toDataURL("image/png");
    var link = document.createElement("a");
    link.href = qrCodeImage;
    link.download = "qrcode.png";
    link.click();
  }

  // Call the createProduct function in the contract
  function createProduct(pid, quality, quantity, exporterLicense, harvestor, source) {
    contract.methods
      .createProduct(pid, quality, quantity, exporterLicense, harvestor, source)
      .send({ from: account, gasPrice: "10000000000", gas: 500000 })
      .then((result) => {
        // Handle the result
        console.log(result);

        var qrCodeImage = generateQRCode({
          pid: pid,
          quality: quality,
          quantity: quantity,
          exporterLicense: exporterLicense,
          harvestor: harvestor,
          source: source,
        });

        // Open the popup and display the QR code image
        openPopup(qrCodeImage);
      })
      .catch((error) => {
        // Handle errors
        console.error(error);
      });
  }

  // Handle form submission
  document.querySelector(".form").addEventListener("submit", (e) => {
    e.preventDefault();
    var pid = document.getElementById("pid").value;
    var quality = document.getElementById("Quality").value;
    var quantity = document.getElementById("Quantity").value;
    var exporterLicense = document.getElementById("Exporter License").value;
    var harvestor = document.getElementById("Harvester").value;
    var source = document.getElementById("Source").value;

    createProduct(pid, quality, quantity, exporterLicense, harvestor, source);
  });

  // Check if MetaMask is installed
  if (window.ethereum) {
    // MetaMask is installed, enable the application
    web3 = new Web3(ethereum);
  } else {
    // MetaMask is not installed, show an error message or redirect the user
    alert("Please install MetaMask to use this application.");
  }

  var contract = new web3.eth.Contract(contractABI, contractAddress);
})();

         

//   function generateQRCode(product) {
//   if (
//     product.pid === undefined ||
//     product.quality === undefined ||
//     product.quantity === undefined ||
//     product.exporterLicense === undefined ||
//     product.harvestor === undefined ||
//     product.source === undefined
//   ) {
//     throw new Error("Missing required product properties");
//   }

//   // Convert the product details into a concatenated string
//   var productDetails =
//     product.pid.toString() +
//     product.quality +
//     product.quantity +
//     product.exporterLicense +
//     product.harvestor +
//     product.source;

//   // Create a new QRCode instance
//   var qrCode = new QRCode(document.getElementById("qrcode"), {
//     text: productDetails,
//     width: 128,
//     height: 128,
//   });



//   // Use html2canvas to capture the QR code element as an image
//   html2canvas(document.getElementById("qrcode")).then(function (canvas) {
//     // Convert the canvas image to a data URL
//     var qrCodeImage = canvas.toDataURL();

    
//   });
// }



// // Function to open the popup and generate the QR code
// function openPopup(qrCodeImage) {
//   var popup = window.open("", "", "width=400,height=400");

//   if (popup && !popup.closed) {
//     popup.document.documentElement.innerHTML = `
//       <html>
//         <head>
//           <title>QR Code</title>
//         </head>
//         <body>
//           <img src="${qrCodeImage}" alt="QR Code" /><br>
//           <a href="${qrCodeImage}" download="qrcode.png">Download QR Code</a>
//         </body>
//       </html>
//     `;
//   } else {
//     alert("The popup window was blocked by the browser. Please allow popups and try again.");
//   }
// }


// // Function to close the popup
// function closePopup() {
//   var popup = document.getElementById('popup');
//   popup.style.display = 'none';
// }

// // Function to download the QR code image
// function downloadQRCode() {
//   var qrCodeDiv = document.getElementById('qrcode');
//   var qrCodeImage = qrCodeDiv.firstChild.toDataURL('image/png');
//   var link = document.createElement('a');
//   link.href = qrCodeImage;
//   link.download = 'qrcode.png';
//   link.click();
// }
    
//       // Call the createProduct function in the contract
//       function createProduct(pid, quality, quantity, exporterLicense, harvestor, source) {
//         contract.methods.createProduct(
//             pid,
//             quality,
//             quantity,
//             exporterLicense,
//             harvestor,
//             source
//           )
//           .send({ from: account, gasPrice: '10000000000', gas: 500000 })
//           .then(function(result) {
//             // Handle the result
//             console.log(result);
            
//             // window.setTimeout(() => {
//             //     location.assign('/')
//             // })

//             var qrCodeImage = generateQRCode({
        
//         pid: pid,
//         quality: quality,
//         quantity: quantity,
//         exporterLicense: exporterLicense,
//         harvestor: harvestor,
//         source: source,
//       });

//       // Open the popup and display the QR code image
//       openPopup(qrCodeImage);
//     })
//           .catch(function(error) {
//             // Handle errors
//             console.error(error);
//           });
//       }
    
//       document.querySelector('.form').addEventListener('submit', function(e) {
//         e.preventDefault();
//         var pid = document.getElementById('pid').value;
//         var quality = document.getElementById('Quality').value;
//         var quantity = document.getElementById('Quantity').value;
//         var exporterLicense = document.getElementById('Exporter License').value;
//         var harvestor = document.getElementById('Harvester').value;
//         var source = document.getElementById('Source').value;
    
//         createProduct(pid, quality, quantity, exporterLicense, harvestor, source);
//       });
    
     
//      // Check if MetaMask is installed
// if (window.ethereum) {
//   // MetaMask is installed, enable the application
//   web3 = new Web3(ethereum);
// } else {
//   // MetaMask is not installed, show an error message or redirect the user
//   alert('Please install MetaMask to use this application.');
// }

    
// var contract = new web3.eth.Contract(contractABI, contractAddress);



// });
//     </script>
    
       
 
 
    
    <script src="js/main.js"></script>

</body>

</html>

        